input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate_authorities => ["/opt/ssl/trusted/cherry.crt"]
    ssl_certificate => "/opt/ssl/cert.crt"
    ssl_key => "/opt/ssl/priv.key"
  }
}

filter {
  # 文字列長が長いものから記述しておいたほうがよい
  if [fields][type] == "nginx" {
    kv {
      field_split => "\t"
      value_split => ":"
    }

    if [req] {
      grok {
        match => { "req" => "^%{WORD:method} %{URIPATHPARAM:uri} %{NOTSPACE:protocol}$" }
        overwrite => [ "method", "uri", "protocol" ]
      }
      mutate {
        remove_field => ["req"]
      }
    }

    grok {
      match => { "uri" => "%{URIPATH:path}(%{URIPARAM:uri_params})?" }
    }
    mutate {
      gsub => [ "uri_params", "^\?", "" ]
    }
    kv {
      source => "uri_params"
      field_split => "&"
      value_split => "="
      target => "params"
    }
    mutate {
      remove_field => [ "uri_params" ]
    }

    date {
      match => ["time", "dd/MMM/yyyy:HH:mm:ss Z"]
      locale => "en"
      target => "@timestamp"
    }
    mutate {
      remove_field => [ "time" ]
    }

    mutate {
      convert => ["size", "integer"]
      convert => ["status", "integer"]
      convert => ["reqtime", "float"]
      convert => ["runtime", "float"]
    }

    if [apptime] {
      mutate {
        convert => ["apptime", "float"]
      }
    }
  }

  if [fields][type] == "activejob" {
    grok {
      match => [ "message", "\[%{TIMESTAMP_ISO8601:time} #%{INT:pid}\] +%{LOGLEVEL:loglevel} -- : .*?\[ActiveJob\] ((?<state>Enqueued) %{NOTSPACE:job} \(Job ID: %{NOTSPACE:jid}\) to .+\(%{NOTSPACE:queue}\) with arguments: %{INT:arg}|\[%{NOTSPACE:job}\] \[%{NOTSPACE:jid}\] (?<state>Performing|Performed)(.*\(%{NOTSPACE:queue}\) in %{NUMBER:duration}ms)?)" ]
    }

    if "_grokparsefailure" in [tags] {
      drop { } # drop if parsing failed
    }

    date {
      match => [ "time", "ISO8601" ]
      target => "time"
      timezone => "Asia/Tokyo"
    }

    if [state] == "Enqueued" {
      aggregate {
        task_id => "%{jid}"
        code => "map['enqueued_at'] = event.get('time'); map['arg'] = event.get('arg').to_i"
      }

      drop { }
    }

    if [state] == "Performing" {
      aggregate {
        task_id => "%{jid}"
        code => "map['started_at'] = event.get('time')"
      }

      drop { }
    }

    if [state] == "Performed" {
      if [job] == "UserUpdateJob" or [job] == "FollowersFetchJob" {
        aggregate {
          task_id => "%{jid}"
          code => "event.set('[args][user_id]', map['arg'])"
        }
      }

      if [job] == "ForceEventUpdateJob" {
        aggregate {
          task_id => "%{jid}"
          code => "event.set('[args][event_id]', map['arg'])"
        }
      }

      aggregate {
        task_id => "%{jid}"
        code => "event.set('enqueued_at', map['enqueued_at']); event.set('started_at', map['started_at'])"
        end_of_task => true
      }

      mutate {
        rename => {
          "time" => "finished_at"
        }
      }
      mutate {
        remove_field => [ "state" ]
        convert => {
          "duration" => "float"
        }
        copy => {
          "finished_at" => "@timestamp"
        }
      }
      ruby {
        code => "event.set('duration', (event.get('duration') / 1000).round(1))"
      }
    }
  }

  if [fields][type] == "gc-stats-sidekiq" {
    if [message] =~ /^#/ {
      drop { }
    }

    json {
      source => "message"
    }

    date {
      match => [ "time", "ISO8601" ]
      target => "time"
    }

    mutate {
      rename => {
        "time" => "@timestamp"
      }
    }
  }

  if [fields][type] == "sidekiq" {
    grok {
      match => [ "message", "%{TIMESTAMP_ISO8601:time} %{INT:pid} TID-%{NOTSPACE:tid} %{NOTSPACE:job} JID-%{NOTSPACE:jid} %{LOGLEVEL:loglevel}: (?<state>start|done|fail)(: %{NUMBER:duration} sec)?" ]
    }

    if "_grokparsefailure" in [tags] {
      drop { } # drop if parsing failed
    }

    date {
      match => [ "time", "ISO8601" ]
      target => "time"
    }

    if [state] == "start" {
      aggregate {
        task_id => "%{tid}-%{jid}"
        code => "map['started_at'] = event.get('time')"
      }

      drop { }
    }

    if [state] == "done" or [state] == "fail" {
      aggregate {
        task_id => "%{tid}-%{jid}"
        code => "event.set('started_at', map['started_at']);"
        end_of_task => true
      }

      mutate {
        gsub => [ "state", "done", "success" ]
      }
      mutate {
        rename => {
          "state" => "result"
          "time" => "finished_at"
        }
      }
      mutate {
        convert => {
          "pid" => "integer"
          "duration" => "float"
        }
        copy => {
          "finished_at" => "@timestamp"
        }
      }
    }
  }

  fingerprint {
    source => "message"
    target => "[@metadata][fingerprint]"
    method => "MD5"
  }
  ruby {
    code => "event.set('[@metadata][tsprefix]', event.get('@timestamp').to_i.to_s(16))"
  }
}

output {
  elasticsearch {
    hosts => ["es:9200"]
    index => "%{[fields][app]}-production-%{[fields][type]}-%{+YYYY.MM}"
    document_id => "%{[@metadata][tsprefix]}%{[@metadata][fingerprint]}"
  }
}
